
import os
import sys
import uuid
import bcrypt
from sqlalchemy.orm import Session
from sqlalchemy.exc import OperationalError

# Add project root to the Python path
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
sys.path.append(PROJECT_ROOT)

from database.database import engine, ApiKey

def create_initial_api_key():
    """
    Connects to the database and creates an initial API key.
    The plain-text key is printed to the console ONCE.
    """
    print("--- Initial API Key Generation ---")

    # 1. Generate a new key
    new_key_str = str(uuid.uuid4())
    print(f"Generated new key string (this will NOT be stored).")

    # 2. Hash the key using bcrypt
    hashed_key = bcrypt.hashpw(new_key_str.encode('utf-8'), bcrypt.gensalt())
    key_hash = hashed_key.decode('utf-8')
    print("Key has been successfully hashed using bcrypt.")

    # 3. Store the hashed key in the database
    new_api_key = ApiKey(
        key_hash=key_hash,
        description="Initial admin key generated by script.",
        is_active=True
    )

    try:
        with Session(engine) as session:
            session.add(new_api_key)
            session.commit()
            print("Successfully saved hashed key to the database.")
    except OperationalError as e:
        print("\n[ERROR] Could not connect to the database.")
        print("Please ensure the following:")
        print("  - Your PostgreSQL server is running.")
        print(f"  - The DATABASE_URL environment variable is set correctly (currently checking: {os.getenv('DATABASE_URL')}).")
        print(f"  - The database and user exist.")
        print(f"Original error: {e}")
        return
    except Exception as e:
        print(f"\n[ERROR] An unexpected error occurred: {e}")
        return

    # 4. Print the key for the admin to copy
    print("\n" + "*"*60)
    print("IMPORTANT: This is the ONLY time the API key will be shown.")
    print("Copy it and store it in a safe place.")
    print("\nAPI Key: ")
    print(f"    {new_key_str}")
    print("\n" + "*"*60)
    print("\nScript finished.")

if __name__ == "__main__":
    create_initial_api_key()
